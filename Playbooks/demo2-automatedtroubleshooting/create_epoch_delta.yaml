#Copyright (c) 2021 Cisco and/or its affiliates.
#
#This software is licensed to you under the terms of the Cisco Sample
#Code License, Version 1.1 (the "License"). You may obtain a copy of the
#License at
#
#               https://developer.cisco.com/docs/licenses
#
#All use of the material herein must be in accordance with the terms of
#the License. All rights not expressly granted by the License are
#reserved. Unless required by applicable law or agreed to separately in
#writing, software distributed under the License is distributed on an "AS
#IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#or implied.

### This playbook creates the epoch delta analysis

- name: Play 1 Login to CNAE
  hosts: all
  connection: local


  tasks:
  
#### Get Unix Time in mSeconds for later user
    - set_fact:
         epochTime: "{{ (ansible_date_time.epoch | int - 86400) * (1000) }}"

#### NAE Login Step 1
    - name: WHOAMI
      uri:
          url: https://{{ nd }}/nae/api/v1/whoami
          method: GET
          status_code: 200
          return_content: yes
          validate_certs: no
      register: output

    - set_fact:
        token: "{{ output.x_nae_login_otp }}"
        cookie: "{{ output.set_cookie }}"


#### NAE Login Step 2
    - name: Login Step 2
      uri:
          url: https://{{ nd }}/nae/api/v1/login 
          headers:
            {
             Cookie: "{{ cookie }}", 
             X-NAE-LOGIN-OTP: "{{ token }}",

             domain : "Local",
             Content-Type: "application/json"
            }
          method: POST
          body_format: json
          body:
            {
             username: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}",
             password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}",
            }
          status_code: 200
          return_content: yes
          validate_certs: no
      register: result

####
    - set_fact:
          cnaelogin: "{{ result.x_nae_csrf_token }}"
          cnaecookie: "{{ result.set_cookie }}"

        
### GET Nae Latest epoch ID for later user 
    - name: Get NAE Latest EPOCH 
      uri:
          url: https://{{ nd }}/nae/api/v1/event-services/epochs?$status=FINISHED&$sort=-collection_time&$size=1&$processed=true&$page=0
          headers:
            {
             x_nae_csrf_token: "{{ cnaelogin }}",
             Cookie: "{{ cnaecookie }}",
             Content-Type: "application/json",
             Accept: "application/json"
            }
          method: GET
          status_code: 200
          return_content: yes
          validate_certs: no
      register: qResult
      delegate_to: localhost
    

    - name: Set latest EPOCH Fact
      set_fact:  
        lEpoch: "{{ qResult.json.value.data[0].epoch_id }}"

#### GET NAE epoch id from 24hours before
    - name: GET NAE 1D Before EPOCH
      uri:
          url: https://{{ nd }}/nae/api/v1/event-services/epochs?$to_collection_time_msecs={{ epochTime }}&$status=FINISHED&$sort=-collection_time&$size=1&$processed=true&$page=0
          headers:
            {
             x_nae_csrf_token: "{{ cnaelogin }}",
             Cookie: "{{ cnaecookie }}",
             Content-Type: "application/json",
             Accept: "application/json"
            }
          method: GET
          status_code: 200
          return_content: yes
          validate_certs: no
      register: qResult
      delegate_to: localhost
    
    - name: Set 1D Before EPOCH Fact
      set_fact:  
        bEpoch: "{{ qResult.json.value.data[0].epoch_id }}"


#### Create Delta Analysis using the current epoch and the 24hours before epoch

    - name: Create NAE Delta Analysis
      uri:
          url: https://{{ nd }}/nae/api/v1/job-services/
          headers:
            {
             X-NAE-CSRF-TOKEN: "{{ cnaelogin }}",
             Cookie: "{{ cnaecookie }}",
             Content-Type: "application/json;charset=UTF-8",
             Accept: "application/json",
            }
          method: POST
          body_format: json
          body: 
              {
                 "name": "AnalysisIssue{{ issueID }}",
                 "type": "EPOCH_DELTA_ANALYSIS",
                 "parameters": [
                     {
                         "name": "prior_epoch_uuid",
                         "value": "{{ bEpoch}}"
                     },
                     {
                         "name": "later_epoch_uuid",
                         "value": "{{ lEpoch }}"
                     }
                 ]
             }
          status_code: 202
          return_content: yes
          validate_certs: no
      register: qResult
      delegate_to: localhost

#### Set Stats to delete analysis later
    - name: Set Stat for deletion
      set_stats:
        data:
          nAnalysis: "{{ qResult.json.value.data.uuid }}"


#### Set Ticket text
    - name: Set Ticket Stat
      set_stats:
        data:
          ticketText: "NAE DeltaAnalysis Created"
        per_host: no
              